name: Check and Deploy

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

on:
  push:
  pull_request:

jobs:
  lint_and_format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy,rustfmt
      - name: Rust formatting
        run: cargo fmt --check
      - name: Rust lint with clippy
        env:
          RUSTFLAGS: "-D warnings"
        run: cargo clippy --all-targets --all-features -- -D warnings
      - uses: kehoecj/validate-configs-action@v4.0.1
      - name: Download Taplo CLI
        run: curl -L -o taplo.gz "https://github.com/tamasfe/taplo/releases/download/0.10.0/taplo-linux-x86_64.gz"
      - name: Extract Taplo
        run: |
          gzip -d taplo.gz
          chmod +x taplo
          sudo mv taplo /usr/local/bin/
      - name: TOML formatting
        run: taplo fmt --check --diff '**/*.toml'

  build_and_push_image:
    if: github.event_name != 'pull_request'
    needs: lint_and_format
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=ref,event=branch
            ${{ github.ref == 'refs/heads/main' && 'type=raw,value=latest' || '' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build_and_push_image
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            cd rwth.cool/
            git fetch origin
            git reset --hard origin/main
            docker compose pull
            docker compose up -d --build --force-recreate
            docker system prune -f

      - name: Purge Cloudflare Cache
        env:
          CF_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CF_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/$CF_ZONE_ID/purge_cache" \
            -H "Authorization: Bearer $CF_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data '{"purge_everything":true}'
